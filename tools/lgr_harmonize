#!/bin/env python
# -*- coding: utf-8 -*-
"""
lgr_harmonized.py - CLI tool to perform LGR harmonization
"""
from __future__ import unicode_literals

import argparse
import logging
import sys
import os

from munidata import UnicodeDataVersionManager

from lgr.parser.xml_parser import XMLParser
from lgr.parser.xml_serializer import serialize_lgr_xml
from lgr.utils import format_cp, cp_to_ulabel
from lgr.tools.utils import write_output
from lgr.tools.harmonize import harmonize

logger = logging.getLogger("lgr_harmonize")


def main():
    parser = argparse.ArgumentParser(description='LGR Harmonize CLI')
    parser.add_argument('-v', '--verbose', action='store_true', help='be verbose')
    parser.add_argument('-r', '--rng', metavar='RNG', help='RelaxNG XML schema')
    parser.add_argument('-l', '--libs', metavar='LIBS', help='ICU libraries', required=True)
    parser.add_argument('-1', '--first', help='First LGR to harmonize', required=True)
    parser.add_argument('-2', '--second', help='Second LGR to harmonize', required=True)
    parser.add_argument('-z', '--root-zone', help='Rootzone LGR to infer variants from')
    parser.add_argument('output', help='Output directory to place generated LGR')

    args = parser.parse_args()

    log_level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(stream=sys.stderr, level=log_level)

    libpath, i18n_libpath, libver = args.libs.split('#')
    manager = UnicodeDataVersionManager()
    unidb = manager.register(None, libpath, i18n_libpath, libver)

    # Parse both lgrs
    def _parse_lgr(filepath):
        parser = XMLParser(filepath)
        parser.unicode_database = unidb
        if args.rng is not None:
            validation_result = parser.validate_document(args.rng)
            if validation_result is not None:
                logger.error('Errors for RNG validation of LGR file %s: %s',
                             filepath, validation_result)
        return parser.parse_document()

    first_lgr, second_lgr = _parse_lgr(args.first), _parse_lgr(args.second)
    rz_lgr = None
    if args.root_zone:
        rz_lgr = _parse_lgr(args.root_zone)

    first_h, second_h, (log_first, log_second) = harmonize(first_lgr, second_lgr, rz_lgr)

    for lgr in (first_h, second_h):
        xml = serialize_lgr_xml(lgr)
        if lgr.name.endswith('.xml'):
            name = lgr.name[:-4] + '_harmonized.xml'
        else:
            name = lgr.name + '_harmonized'
        with open(os.path.join(args.output, name), 'wb') as f:
            f.write(xml)

    # Handle log output
    def _process_log(log):
        for cp in log:
            write_output("- {} ({})".format(format_cp(cp), cp_to_ulabel(cp)))

    write_output("Manual review needed for code points from first LGR:")
    _process_log(log_first)
    write_output("Manual review needed for code points from second LGR:")
    _process_log(log_second)


if __name__ == '__main__':
    main()
